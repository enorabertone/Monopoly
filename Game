public sealed class Game
    {
        //Attributes
        public Board board { get; set; }
        public List<IPlayer> players { get; set; }
        public UserInteraction interaction = new UserInteraction();
        public Random random = new Random();
        public Die dice { get; set; }
        public bool endParty { get; set; }

        //Constructors
        //We want to only have one game instance, so we implemented the class as a singleton.
        //Store the unique instance of the Game in a static variable
        static private Game game = new Game();
        //Allow the user to access our unique Game instance
        public static Game Instance { get => game; }

        //Ensure the uniqueness of the Game
        private Game()
        {
            board = Board.Instance;
            players = new List<IPlayer>();
            InitializationPlayers();
            dice = new Die();
            endParty = false;
        }

        //Methods

        /// <summary>
        /// Methods that initilize the players present in the game before starting the party
        /// </summary>
        public void InitializationPlayers()
        {
            bool anotherPlayer = true;
            while(anotherPlayer)
            {
                Console.Clear();
                Console.WriteLine($"Player {players.Count + 1} :");
                string playerName = interaction.StringAnswer("What is your name ?");
                Player player = new Player(players.Count + 1, playerName, this);
                players.Add(player);
                Console.WriteLine($"Player {players.Count}: {player.name}. You are displayed as the " + (char)(player.id +64) + $" symbol. You start at position {player.position}.\n");
                Console.ReadKey();

                if (players.Count >= 8)
                    break;

                if (players.Count >= 2)
                    anotherPlayer = interaction.GetConfirmation("Do you want to add another player ?");
            } 
        }
        
        /// <summary>
        /// Methods that start the party
        /// </summary>
        public void BeginParty()
        {
            Console.Clear();
            while(!endParty)
            {
                foreach (IPlayer player in new List<IPlayer>(players))
                {
                    Console.WriteLine($"{player.name}, it's your turn. You're position {player.position}");
                    DisplayBoard();
                    player.PlayTurn();
                    Console.ReadKey();
                    Console.Clear();
                }

            }
        }
        
        /// <summary>
        /// Methods for display the board with players' position
        /// </summary>
        public void DisplayBoard()
        {
            //Display the first line with the number of the case
            for (int i = 0; i < board.boardSpace.Length; i++)
            {
                Console.Write(board.boardSpace[i]);
                if (i < 10)
                    Console.Write(" ");
                if (i < board.boardSpace.Length - 1)
                    Console.Write(" |");
            }
            Console.WriteLine();

            //Display the players
            List<IPlayer> playersToDisplay = new List<IPlayer>(game.players);
            int displayedCount;
            //While there are still players, we display an additional line with these players.
            while (playersToDisplay.Count > 0)
            {
                for (int spaceNumber = 0; spaceNumber < board.boardSpace.Length; spaceNumber++)
                {
                    displayedCount = 0;
                    List<IPlayer> playersOnThisSpace = playersToDisplay.FindAll(player => player.position == spaceNumber);
                    foreach (IPlayer player in playersOnThisSpace)
                    {
                        displayedCount++;
                        Console.Write((char)(player.id + 64));
                        playersToDisplay.Remove(player);
                        if (displayedCount >= 3)
                        {
                            break;
                        }
                    }
                    while (displayedCount < 3)
                    {
                        Console.Write(" ");
                        displayedCount++;
                    }
                    if (spaceNumber < board.boardSpace.Length - 1)
                    {
                        Console.Write("|");
                    }
                }
                Console.WriteLine();
            }
            
        }
        
    }
